<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- Created with Inkscape (http://www.inkscape.org/) -->

<svg
   width="203.86768mm"
   height="136.91174mm"
   viewBox="0 0 203.86768 136.91174"
   version="1.1"
   id="svg12"
   inkscape:export-filename="../a8962b25/btn.svg"
   inkscape:export-xdpi="124"
   inkscape:export-ydpi="124"
   inkscape:version="1.2.2 (732a01da63, 2022-12-09, custom)"
   sodipodi:docname="botones"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:svg="http://www.w3.org/2000/svg">
  <sodipodi:namedview
     id="namedview14"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:showpageshadow="2"
     inkscape:pageopacity="0"
     inkscape:pagecheckerboard="true"
     inkscape:deskcolor="#d1d1d1"
     inkscape:document-units="mm"
     showgrid="false"
     inkscape:zoom="0.64882602"
     inkscape:cx="112.5109"
     inkscape:cy="342.92706"
     inkscape:window-width="1360"
     inkscape:window-height="717"
     inkscape:window-x="0"
     inkscape:window-y="0"
     inkscape:window-maximized="1"
     inkscape:current-layer="layer1-7" />
  <defs
     id="defs9">
    <linearGradient
       id="linearGradient1438"
       inkscape:swatch="solid">
      <stop
         style="stop-color:#280b0b;stop-opacity:1;"
         offset="0"
         id="stop1436" />
    </linearGradient>
    <style
       class="style-fonts"
       id="style7045">
      @font-face {
        font-family: &quot;Virgil&quot;;
        src: url(&quot;https://excalidraw.com/Virgil.woff2&quot;);
      }
      @font-face {
        font-family: &quot;Cascadia&quot;;
        src: url(&quot;https://excalidraw.com/Cascadia.woff2&quot;);
      }
    </style>
    <style
       class="style-fonts"
       id="style8303">
      @font-face {
        font-family: &quot;Virgil&quot;;
        src: url(&quot;https://excalidraw.com/Virgil.woff2&quot;);
      }
      @font-face {
        font-family: &quot;Cascadia&quot;;
        src: url(&quot;https://excalidraw.com/Cascadia.woff2&quot;);
      }
    </style>
    <style
       class="style-fonts"
       id="style8649">
      @font-face {
        font-family: &quot;Virgil&quot;;
        src: url(&quot;https://excalidraw.com/Virgil.woff2&quot;);
      }
      @font-face {
        font-family: &quot;Cascadia&quot;;
        src: url(&quot;https://excalidraw.com/Cascadia.woff2&quot;);
      }
    </style>
  </defs>
  <g
     inkscape:label="Capa 1"
     inkscape:groupmode="layer"
     id="layer1-7"
     transform="translate(16.702967,-55.784681)">
    <script
       id="mesh_polyfill-9"
       type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
    <!-- svg-source:excalidraw -->
    <mask
       id="mask7065" />
    <!-- svg-source:excalidraw -->
    <g
       stroke-linecap="round"
       id="g8321"
       transform="matrix(0.26458333,0,0,0.26458333,-19.084043,9.644118)"
       inkscape:export-filename="../a8962b25/sud-ventana.svg"
       inkscape:export-xdpi="124"
       inkscape:export-ydpi="124">
      <g
         stroke-opacity="0.5"
         fill-opacity="0.5"
         transform="translate(387.52398,190.28109)"
         fill-rule="evenodd"
         id="g8319">
        <path
           d="m -360.51,5.94 c 0,0 0,0 0,0 m 0,0 c 0,0 0,0 0,0 m -5.01,17.01 c 2.74,-3.82 6.84,-7.07 20.75,-21.52 m -22.2,24.16 c 6.31,-6.88 9.19,-12.63 19.78,-24.19 m -22.23,36.4 c 8.17,-6.65 17.03,-17.17 33.38,-35.74 m -32.03,36.47 c 9.74,-9.57 18.18,-20.42 33.13,-37.31 m -31.48,46.3 c 8.92,-8.24 17.98,-20.38 41.8,-46.98 m -40.8,48.22 c 8.46,-10.44 16.84,-20 40.11,-47.24 m -35.93,56.6 c 13.68,-15.1 24.26,-29.69 45.81,-58.69 m -46.78,56.67 c 15.74,-17.4 29.82,-34.63 48.87,-54.91 m -43.68,59.09 c 10.48,-11.37 21.34,-24.99 53.44,-58.03 m -52.81,58.98 c 19.16,-19.52 36.16,-39.08 54.56,-61.72 m -47.88,65.15 c 19.74,-21.05 38.19,-40.88 56.83,-64.43 m -55.42,66.02 c 18.01,-22.15 37.46,-43.71 55.2,-66.1 m -41.68,58.91 c 11.13,-9.58 22.32,-25.07 54.44,-58.77 m -54.24,60.83 c 20.24,-22.84 40.49,-47.18 53.83,-60.67 m -42.53,59.66 c 14.43,-18.86 32.71,-35.83 52.58,-60.3 m -52.87,60.75 c 16.19,-18.28 30.96,-34.71 54.16,-61.17 m -43.43,60.4 c 11.52,-17.01 25.22,-28.78 53.98,-58.41 m -52.62,58.46 c 16.56,-22.16 35.74,-42.53 51.03,-60.25 m -42.18,58.97 c 15.99,-14.23 27.86,-29.32 52.17,-57.78 m -50.17,58.36 c 18.78,-22.38 39.46,-44.3 50.83,-60.56 m -41.31,60.75 c 13.2,-15.73 25.26,-29.32 50.84,-57.06 m -50.2,56.53 c 11.97,-13.68 24.58,-27.14 48.88,-55.5 m -38.42,55.41 C -266.27,45 -253.93,31.67 -231.6,4.01 m -47.17,55.79 c 11.76,-15.1 25.11,-29.24 47.96,-55.01 m -39.25,54.49 c 17.64,-17.69 32.77,-34.7 48.25,-57.14 m -46.81,57.15 c 17.38,-20.37 33.86,-39.32 48.54,-55.76 m -38.14,54.76 c 14.56,-15.59 25.12,-28.4 48.56,-53.51 m -49.28,55.76 c 11.09,-15.06 23.35,-27.19 48.72,-55.9 m -39.91,56.08 c 20.16,-23.74 37.41,-45.05 49.66,-55.5 m -47.65,54.02 c 19.88,-21.42 37.42,-43.6 47.42,-54.85 m -37.27,56.36 c 16.12,-17.43 28.61,-34.43 50.73,-57.52 m -49.93,56.98 c 10.73,-13.34 21.03,-24.32 47.19,-55.51 m -35.65,54.31 c 11.02,-10.67 22.9,-27.5 46.44,-53.51 m -46.93,54.44 c 12.48,-14.99 25.88,-30.36 46.81,-57.07 m -37.9,56.21 c 12.68,-12.05 24.37,-25.01 50.97,-56.88 m -49.55,58.09 c 16.01,-21.65 33.94,-40.97 47.33,-56.91 m -37.03,56.61 c 14.48,-17.42 30.28,-34.72 49.98,-56.55 m -50.01,56.86 c 18.79,-22.91 37.72,-44.05 48.03,-56.71 m -38.98,57.15 c 19.72,-22.22 38.91,-41.99 48.65,-56.95 m -47.08,56.1 c 11.3,-14.23 25.38,-30.37 48.45,-56.4 m -39.4,57.27 c 20.69,-21.22 35.54,-42.07 51.64,-58 m -49.37,56.87 c 16.49,-19.61 32.46,-39.14 48.4,-56.12 m -40.35,56.95 c 19.08,-21.67 37.88,-42.34 50.47,-54.36 m -47.89,54.38 c 17.34,-22.04 33.41,-40.97 47.23,-55.53 m -36.4,52.72 c 14.19,-17.86 32.72,-36.3 46.13,-54.47 m -47.94,56.38 c 11.66,-11.9 23.11,-24.77 48.55,-54.82 m -38.05,55.45 c 10.17,-13 22.95,-25.08 49.13,-55.99 m -48.45,55.72 c 17.87,-19.48 32.87,-38.96 48.27,-56.14 m -36.5,54.52 c 14.13,-15.85 27.04,-34.72 46.16,-52.85 m -47.78,54.75 c 14.1,-17.6 28.33,-32.76 49.13,-56.66 m -38.99,57.66 c 15.6,-17.82 31.49,-35.23 47.36,-58.47 m -46.41,55.74 c 15.17,-16.77 29.6,-33.87 48.22,-53.79 m -37.03,52.85 C -104.58,41 -87.09,20.95 -73.89,3.8 m -46.08,56.16 c 14.82,-16.88 28.4,-33.6 46.8,-55.19 m -37.64,55.93 c 16.83,-21.83 33.7,-43.35 49.18,-55.9 m -49.83,54.69 c 11.32,-11.62 19.78,-22.17 49.07,-55.53 m -39.57,54.26 C -86.9,45.65 -78.07,34.48 -50.98,2.9 M -99.47,60.34 C -80.7,37.54 -62.52,17.12 -51.96,4.87 M -87.95,60.89 C -74.91,43.18 -59.46,25.81 -39.29,4.7 M -89.24,60.42 C -78.49,47.77 -68.35,36.59 -40.43,4.24 M -77.01,60.17 C -61.35,38.42 -39.34,14.34 -31.13,2.75 M -78.9,59.03 C -59.32,38.29 -40.75,17.9 -29.64,4.72 m -38.93,56.77 c 17.18,-19.63 34.6,-42.23 49.16,-56.68 m -48.43,54.58 c 17.17,-18.94 34.2,-38.65 46.76,-54.04 m -36.7,55.39 C -41.14,40.15 -21.21,19.82 -11.29,3.33 m -47.17,57 C -41.88,42.39 -26.64,24.04 -9.07,4.3 M -47.96,60.74 C -27.69,38.18 -11.18,18.3 1.39,2.2 M -47.95,60.12 C -32.55,42.28 -16.36,24.37 3.55,2.92 M -35.17,59.78 C -27.08,48.79 -13.27,34.77 12.31,3.33 M -36.02,60.16 C -21.9,44.05 -8.44,28.72 14.44,3.46 M -24.65,60.11 C -8.88,39.06 6.57,21.51 23.36,2.26 M -26.65,60.74 C -7.98,40.18 11.12,18 25.11,2.04 M -15.35,60.4 C -3.56,47.27 8.97,33.47 36.26,1.77 M -15.85,58.81 C 2.76,39.14 20.88,19.23 35.35,1.45 M -4.43,60.32 C 14.48,38.83 33.95,14.75 46.05,2.07 M -5.4,59.71 C 8.33,45.59 20.05,31.95 45.42,2.62 M 4.27,60.94 C 22.11,42.4 35.52,28.54 56.52,1.35 M 5.41,58.95 C 23.76,39.2 41.82,21.06 56.31,2.37 M 15.67,61.34 C 30.39,48.12 41.69,34.12 67.8,4.23 M 15.99,59.91 C 32.91,41.35 50.01,20.25 65.98,3.19 M 27.03,59 C 40.22,41.89 57.43,25.03 75.79,2.29 M 26.75,59.63 C 38.67,47.06 47.96,36.04 77.62,2.95 M 39.37,58.39 C 55.73,39.29 75.4,17.66 87.7,2.58 M 37.31,60.55 C 49.8,44.27 62.06,30.55 87.89,2.68 M 48.37,60.18 C 62.7,46.63 73.68,31.07 97.54,4.07 M 48.12,61.02 C 67.75,38.09 87.69,15.19 99.19,2.31 M 58.46,58.71 C 76.56,37.62 96.38,16.11 109.6,2.22 M 59.33,60.01 C 71.32,46.32 81.5,33.01 109.89,2.39 M 70.43,59.06 C 85.3,40.9 98.66,25.47 117.99,1.41 m -48.91,58 c 18.91,-19.7 36.24,-41.73 51.5,-57.5 M 79.49,58.5 c 18.73,-18.83 35,-34.88 50.59,-55 M 80.41,60.75 C 97.98,39.17 117.32,17.18 130.34,1.98 M 90.15,59.76 C 105.2,41.83 116.82,28.98 142.09,0.28 M 90.82,59.72 c 9.65,-10.33 20.96,-22.41 50.15,-58.1 M 99.75,59.5 C 118.11,39.41 136.63,21.4 150.49,2.01 M 100.56,59.9 C 120.27,38.48 138.64,17.17 151.23,1.49 M 109.88,60.86 C 123.68,46 136.69,32.61 163.57,1.9 m -52.73,58.6 c 14.1,-16.14 29.69,-32.51 52.3,-58.83 M 121.96,61.93 C 139.75,38.53 159.56,20.45 172.9,0.61 M 122.09,60.17 C 133.03,47.75 144.77,35.33 172.17,1.36 M 132.69,60.22 C 145.78,46.59 156.68,34.11 184.88,2.75 m -52.64,57.92 c 18.33,-20.93 35.82,-42.44 51.29,-58 M 145.58,61.25 C 154.45,47.35 166,30.59 196.17,1.39 M 142.92,60.67 C 157.87,41.23 173.85,25.33 194.39,2.37 M 154.44,58.94 C 170.97,41.82 185.86,22.86 205.25,2.55 M 153.76,59.51 C 167.13,45.65 181.31,29.34 204.18,1.6 M 166.84,60.19 C 176.4,43.55 191.79,31.92 215.88,1.7 M 164.6,60.9 C 177.23,44.67 190.37,30.65 214.76,1.69 M 175.7,61.36 C 192.65,38.7 209.08,22.45 224.64,0.27 M 175.77,60.71 C 188.32,44.99 199.27,31.99 226.76,1.82 M 186.7,60.73 C 198.16,48.69 209.11,33.84 236.38,2.14 M 186.3,60.71 C 203.76,38.98 221.22,18.88 235.77,0.87 m -37.94,58.2 C 213.86,41.69 227.22,20.83 247.76,2.14 M 196.24,60.31 C 217.46,36.28 236.35,13.93 246.59,1.06 M 206.21,60.84 C 222.92,41.98 235.38,25.94 259.4,1.8 M 206.17,61.08 C 221.6,43.22 236.76,26 258.17,1.07 M 218.25,59.69 C 237.08,39.3 254.82,19.94 268.08,1.63 M 218.14,61.48 C 230.49,46.49 243.35,31.83 268.57,1.43 m -40.73,59.56 c 7.97,-9.92 18.99,-24.1 52.98,-58.95 M 226.63,62.62 C 240.79,46.69 254.27,32.05 279.74,0.85 M 235.8,61.31 C 251.12,50.11 260.41,34.13 291.81,3.45 M 236.69,61.01 C 255.82,40.63 275.95,18.07 289.26,1.41 M 248.78,62.65 C 263.07,43.93 278.19,29.86 300.54,3.7 M 247.69,62.06 C 267.23,37.44 289.67,14.6 299.16,1.38 M 260.05,63 C 274.08,43.1 294.17,23.39 309.26,0.34 M 258.74,61.82 C 277.31,40.2 295.29,19.06 310.17,2.62 m -42.5,59.67 C 285.78,41.43 304.63,18.69 321.9,4.38 M 269.72,62.25 C 288.1,40.69 305.33,19.61 321.4,3.69 m -43.39,59.2 C 292.37,47.99 304.44,33.04 332.8,2.77 M 279.46,60.95 C 293.43,47.09 305.14,31.93 331.77,3.52 M 289.23,62.14 C 303.97,44.41 318.54,31.16 341.65,4.17 M 290.02,60.93 C 310.41,38.23 330.49,15.54 341.74,2.45 M 302.78,60.82 C 319.77,36.96 340.08,14.24 350.91,5.2 M 300.94,62.33 C 319.18,40.6 337.26,20.12 351.47,3.73 M 310.93,63.67 C 331.2,38.16 349.68,15.53 362.66,5.43 M 311.5,62.2 C 330.1,40.89 349.53,18.67 362.44,3.73 M 324.21,59.88 C 338.08,43.81 352.7,25.13 372.13,6.13 M 322.94,62.25 C 340.12,40.69 356.92,21.07 371.67,5.99 m -36.7,57.61 c 8.51,-15.38 23.94,-29.51 38.3,-50.05 M 332.73,62.56 C 345.92,47.81 357.2,33.82 374.12,13.73 m -29.25,48.69 c 5.96,-7.76 11.31,-16.37 32.43,-40.82 m -34.48,39.78 c 7.45,-7.56 15.08,-16.2 35.1,-39.64 m -21.59,40.17 c 4.21,-8.74 10.08,-17.2 24.86,-27.76 m -27.32,26.7 c 6.79,-6.54 14.93,-15.23 25.76,-28.84 m -15.52,30.04 c 4.21,-5.62 10.5,-11.21 13.58,-16.01 m -12.14,14.73 c 4.03,-4.63 9.65,-10.74 13.49,-14.86 m -736.33,14.53 c 0,0 0,0 0,0 m 0,0 c 0,0 0,0 0,0 m 8.07,-5.09 c -4.33,-0.74 -6.93,-6.22 -14.91,-10.26 m 14.67,12.27 c -3.54,-3.8 -9.91,-8.88 -12.66,-11.64 m 29.15,13.49 c -11.48,-8.32 -22.58,-17.97 -29.96,-26.89 m 28.06,25.67 c -10.22,-7.97 -22.24,-19.07 -29.91,-25.59 m 42.04,28.11 c -11.72,-14.7 -25.39,-25.66 -41.14,-38.69 m 41.37,37.88 c -13.18,-12.66 -26.1,-22.86 -42.79,-38.51 m 52.99,34.94 c -10.94,-8.53 -22.24,-18.04 -51.67,-44.24 m 53.35,46.24 C -322.57,48.48 -333.57,38.85 -363.03,14 m 63.37,41.3 C -316.11,43.02 -333.21,30.25 -361.31,5.54 m 60.84,50.17 C -320.1,40.59 -339.35,23.09 -360.7,5.31 m 72.97,49.84 c -21.14,-13.74 -36.86,-32.32 -66.38,-56.34 m 65.83,57.93 C -302.13,43.9 -315.33,32.89 -352.51,-0.19 m 78.38,56.87 c -27.4,-21.06 -54.23,-44.56 -67.23,-57.93 m 65,57.78 c -23.56,-19.07 -45.16,-40.08 -67.61,-58.86 m 78.48,57.47 c -14.66,-9.94 -27.09,-25.02 -65.98,-55.93 m 66.95,57.95 c -20.05,-18.33 -41.24,-35.64 -67.33,-59.63 m 81.02,57.69 c -19.56,-13.53 -39.78,-29.63 -70.51,-56.56 m 68.5,57.14 c -22.09,-18.59 -45.85,-39.18 -67.61,-58.19 m 79.3,59.31 c -17.99,-19.53 -42.3,-35.07 -68.38,-60.93 m 69.1,59.89 C -260.95,38.06 -283.06,18.91 -308.1,-3.26 m 79.7,60.6 c -22.41,-21.52 -41.49,-38.61 -68.43,-62.26 m 69.17,61.05 c -22.51,-18.64 -45.63,-39.64 -69.23,-59.94 m 79.9,60.36 C -228.23,44.4 -244.03,32.83 -284.46,-4.8 m 69.51,62.5 C -234.1,41.16 -253.2,26.07 -284.18,-2.68 m 80.4,60.74 c -14.28,-14.3 -29.42,-27.28 -67.33,-62.42 m 67.14,60.23 C -228.9,34.02 -255.19,11.68 -272.85,-4.56 m 83.29,59.24 c -20.74,-17.2 -45.97,-35.39 -72.86,-59.92 m 72,62.4 c -15.66,-14.12 -33.53,-28.29 -69.66,-61.02 m 81.23,61.51 c -18.27,-15.57 -33.66,-31.93 -67.11,-57.78 m 66.93,55.86 c -23.27,-19.28 -46.3,-40.55 -66.51,-57.34 m 77.93,59.45 C -180.9,44.57 -194.94,31.65 -232.8,-0.17 m 66.26,57.97 c -20.7,-20.73 -44.35,-39.23 -67.66,-59.39 m 79.42,57.19 c -21.93,-20.23 -43.86,-38.97 -65.65,-58.28 m 65.95,59.46 c -13.36,-12 -27.44,-24.78 -68.06,-59.56 m 80.33,59.98 c -18.68,-13.71 -35.52,-29.22 -67.33,-58.99 m 67.15,58.71 c -19.14,-18.06 -38.48,-35.06 -66.18,-57.75 m 78.33,57.53 C -144.2,44.15 -160.33,28.66 -197.3,-0.67 m 66.72,57.17 c -18.22,-16.23 -38.6,-34.83 -65.73,-57.46 m 79.68,58.74 C -137.08,37.71 -158.8,22.51 -185.3,-3.07 m 68.9,59.89 c -22.09,-17.78 -43.51,-36.15 -68.66,-59.08 m 80.93,57.87 c -24.5,-19.93 -47.92,-40.75 -70.98,-59.05 m 70.14,60.82 C -121.88,42.2 -137.42,28.57 -172.16,-2.61 m 79.75,59.87 C -111.36,43.3 -128.72,25.05 -159.23,-1.12 m 66.81,58.66 c -16.15,-13.68 -32.76,-28.56 -68.77,-59.08 m 79.58,57.16 C -96.84,41.7 -111.71,27.47 -148.63,-2.46 m 67.96,60.11 C -96.92,41.85 -113.63,27 -148.8,-1.18 m 81.48,60.35 C -89.39,39.28 -111.98,21.62 -136.74,-0.4 m 69.1,58.52 c -20.67,-19.09 -39.61,-35.1 -68.22,-60.66 m 79.77,60.43 c -24.9,-22.86 -48.98,-43.87 -66.07,-57.8 m 66.11,56.45 C -71.62,43.15 -87.5,30.04 -123.55,-1.73 m 78.13,57.39 C -62.89,42.83 -79.88,27.59 -111.49,0.5 m 66.85,56.86 C -69.25,34.32 -95.47,11.84 -111.32,-2.17 m 80.07,58.36 C -45.46,45.07 -59.33,32.13 -99.24,-2.72 M -32.9,57.03 C -52.24,39.45 -72.53,22.91 -100.12,-0.92 m 80.39,57.04 C -37.59,38.86 -55.71,23.44 -87.39,-0.37 M -20.12,56.4 C -37.78,40.23 -56.72,25.38 -87.21,-1.56 M -6.97,58.2 C -21.82,46.43 -37.83,32.16 -76.38,-0.61 M -8.34,57.11 C -34.96,33.37 -61.42,11.45 -74.33,-1.1 M 5.47,57.17 C -12.16,44.65 -26.81,32.74 -60.6,-3.13 M 4.85,56.75 C -15.23,39.43 -36.74,21.25 -62.54,-0.86 m 81.12,57.05 c -29.17,-23.26 -54,-42.93 -70.97,-58.86 m 69.5,59.18 C -5.38,38.33 -27.35,17.8 -51.38,-0.83 M 28.38,56.73 C 14.71,43.59 0.47,31.57 -36.79,-2.56 m 65.35,58.9 C 9.59,38.76 -10.95,22.11 -36.95,-1.81 M 42.98,56.34 C 26.83,42.94 9.49,28.68 -26.3,-0.11 M 41.56,57.96 C 19.88,40.13 0.08,20.92 -25.85,-1.69 M 54.98,58.57 C 33.04,43.7 18.37,26.29 -12.86,-2.23 m 66.8,60.3 C 33.25,39 11.73,21.9 -14.47,-1.76 M 65.57,57.41 C 44.23,36.32 21.07,16.9 -3.38,0.48 M 65.75,57.95 C 51.86,43.74 37.28,30.11 -1.7,-1.53 M 76.97,55.12 C 47.31,31.87 18.98,7.39 3.24,-5.73 M 78.53,56.63 C 62.1,43.27 47.34,30.59 4.75,-6.98 M 89.46,56.07 C 65.23,36.37 43.63,15.15 16.78,-6.87 M 91.04,57.95 C 64.95,34.63 38.44,11.71 17.73,-6.41 m 84.1,63.05 C 77.97,34.13 51.95,15.18 27.43,-8.28 m 75.08,65.95 C 78.87,37.16 54.41,16.41 29.24,-6.24 m 86.22,63.86 C 98.1,39.25 76.04,25.71 42.48,-7.75 m 72.94,64.94 C 95.68,40.14 74.22,22.66 41.79,-6.92 m 84.97,64.99 C 109.22,40.22 92.95,27.94 53.26,-6.96 m 73.42,63.59 C 108.53,42.25 93.31,28.4 54.11,-5.06 m 85.32,61.6 C 114.44,36.6 90.23,14.52 67.64,-5.62 m 71.1,62.89 C 114.37,35.04 90.48,15.17 66.38,-6.38 m 86.35,62.55 C 124.61,33.82 96.91,7.26 78.05,-4.99 m 72.42,62.91 C 128.7,37.97 104.25,18.62 79.06,-5.96 m 82.9,64.56 C 140.64,37.31 118.02,17.5 89.98,-6.07 M 162.5,58.12 C 138.15,33.9 111.45,11.37 90.05,-7.14 m 84.41,63.51 C 143.8,32.72 114.86,6.65 102.17,-8.37 m 73.74,66.09 C 160.36,43.91 143.86,30.87 101.73,-7.11 m 84.4,65.94 C 159.07,33.48 134.11,11.99 114.21,-5.47 M 187.55,56.1 C 173.02,44.36 156.96,31.39 115.21,-7.17 m 83.21,65.11 C 177.21,34.95 153.1,15.93 125.94,-8.49 M 199.7,57.18 C 170.3,32.2 142.23,5.31 126.59,-6.96 m 84.2,65.1 C 186.51,35.97 164.07,16.39 137.8,-4.95 m 75.58,61.52 C 186.94,34.45 159.14,12.28 139.93,-6.08 m 85.63,63.53 c -23.03,-18 -43.33,-37.14 -74.34,-62.31 m 74.64,62.75 C 197.23,33.91 168.93,9.24 150.51,-6.94 m 86.77,65.66 C 212.87,36.49 190.67,19.57 164.71,-8.34 M 236.86,57.3 C 209.34,34.62 182.03,10.75 163.61,-7.09 m 85.98,65.81 C 225.27,40.08 205.33,18.35 174.32,-7.69 M 250.08,57.8 C 226.83,36.95 202.97,17.45 175.72,-6.07 m 83.95,64.08 C 241.32,38.58 217.4,21.26 185.91,-6.26 m 74.55,64.67 C 233.51,33.04 203.67,7.39 187.56,-7.04 M 274.5,58.12 C 245.16,33.85 215.92,5.61 198.61,-5.97 m 74.55,62.52 C 244.86,33.36 216.81,8.61 200.34,-7.02 m 85.98,65.04 C 264.46,42.37 247.24,23.54 212.36,-6.75 m 73.45,64.5 C 270.13,42.9 253.37,28.28 211.96,-7.09 m 84.27,65.73 C 279.42,41.69 257.44,21.67 223.41,-6.11 m 73.36,63.6 C 268.28,33.02 238.91,6.53 223.34,-6.74 m 86.23,62.09 C 284.33,34.84 257.07,9.33 236.53,-5.92 m 72.85,62.78 C 286.91,37.32 264.83,18.9 235.36,-7.35 m 88.15,65.84 C 300.22,39.13 276.06,15.9 249.57,-6.6 M 322.2,56.36 C 303.47,43.24 286.57,28.18 248.1,-7.16 m 87.15,65.65 C 314.59,38.38 290.94,20.38 262.14,-5.96 m 71.9,64.26 C 309.36,37.21 285.23,16.91 260.42,-6.86 M 346.55,55.8 C 319.59,35.79 296.33,16.16 273.17,-8 m 73.98,65.92 C 318.42,32.25 289.13,8.12 274.11,-7.14 m 85.6,64.38 C 334.61,36.93 310.2,12.86 286.39,-5.14 m 71.63,62.2 C 344.25,43.47 330.19,31.36 286.2,-5.65 m 84.62,64.28 C 350.52,40.2 328.53,19.49 300.57,-6.31 m 70.82,64.3 C 343.87,33.89 314.34,10.8 297.96,-5.86 m 76.77,57.9 C 355.43,33.05 333.6,14.89 311.26,-6.5 m 64.63,56.42 C 356.87,34.32 337.63,18.33 311.37,-5.34 m 67.31,49.88 C 364.07,29.83 348.95,16.84 324.59,-4.25 m 53.92,47.26 C 368.66,32.55 356.24,23.33 323.65,-4.07 m 55.47,36.61 C 369.06,26.05 361.68,18.14 336.21,-5.14 m 43.9,39.11 C 363.22,18.99 347.06,4.19 336.98,-4.57 m 40.4,27.86 C 365.7,13.59 357.06,3.31 349.07,-3.3 m 28.78,24.06 C 371.24,13.71 363.21,6.96 349.03,-4.21"
           stroke="#228be6"
           stroke-width="1"
           fill="none"
           id="path8315" />
        <path
           d="m -0.25,0.82 c 54.5,-0.21 264.19,-2.98 326.35,-1.13 62.16,1.86 38.72,3.19 46.6,12.25 7.89,9.05 8.19,34.14 0.72,42.06 -7.48,7.92 16.74,4.63 -45.58,5.47 -62.31,0.84 -223.32,-0.28 -328.31,-0.43 -104.99,-0.15 -241.8,-0.22 -301.64,-0.47 -59.84,-0.25 -47.16,6.45 -57.38,-1.02 -10.23,-7.48 -11.45,-34.11 -3.96,-43.82 7.49,-9.7 -11.86,-12.28 48.9,-14.41 60.77,-2.13 263.28,1.5 315.7,1.65 M 1.82,0.2 c 54.46,-0.1 261.33,-1.23 323.56,0.87 62.23,2.1 41.76,2.68 49.8,11.71 8.04,9.04 6.47,35.17 -1.56,42.51 -8.03,7.34 15.51,1.1 -46.64,1.52 -62.16,0.41 -221.56,0.88 -326.29,0.97 -104.73,0.09 -241.94,-0.26 -302.08,-0.42 -60.13,-0.16 -48.7,6.97 -58.72,-0.55 -10.02,-7.53 -9.13,-34.88 -1.42,-44.6 7.72,-9.71 -12.28,-11.46 47.71,-13.7 59.99,-2.23 260.17,0.07 312.24,0.3"
           stroke="#000000"
           stroke-width="2"
           fill="none"
           id="path8317" />
      </g>
    </g>
    <mask
       id="mask8323" />
    <g
       stroke-linecap="round"
       id="g8329"
       transform="matrix(0.26458333,0,0,0.26458333,-19.084043,9.644118)">
      <g
         transform="translate(35.53429,263.20885)"
         id="g8327">
        <path
           d="M 0.64,0.63 C 121.08,0.57 601.21,0.37 721.69,0.44 M -0.48,-0.08 c 120.89,0 603.77,1.21 724.39,1.6"
           stroke="#000000"
           stroke-width="2"
           fill="none"
           id="path8325" />
      </g>
    </g>
    <mask
       id="mask8331" />
    <g
       stroke-linecap="round"
       id="g8337"
       transform="matrix(0.26458333,0,0,0.26458333,-19.084043,9.644118)">
      <g
         transform="translate(10.877553,430.28919)"
         id="g8335">
        <path
           d="M 0.92,-0.25 C 1.36,-17.23 1.7,-68.5 1.7,-102.79 1.7,-137.08 -0.52,-182 0.93,-206 c 1.44,-24 0.18,-33.15 9.45,-40.79 9.27,-7.64 7.69,-4.16 46.17,-5.05 38.48,-0.89 112.67,-0.19 184.71,-0.3 72.03,-0.12 168.04,-0.58 247.48,-0.37 79.44,0.21 184.27,0.2 229.16,1.62 44.89,1.42 32.04,-0.9 40.2,6.88 8.16,7.78 7.68,14.95 8.78,39.82 1.1,24.87 -2.02,73.71 -2.18,109.41 -0.17,35.7 1.35,71.11 1.21,104.78 -0.15,33.68 -2.25,63.1 -2.08,97.26 0.16,34.16 3.51,83.02 3.07,107.73 -0.44,24.7 2.25,32.97 -5.72,40.51 -7.97,7.53 -1.62,4.32 -42.1,4.69 -40.48,0.37 -120,-1.67 -200.78,-2.47 -80.78,-0.8 -206.28,-2.17 -283.9,-2.33 -77.62,-0.16 -143.67,1.85 -181.8,1.36 C 14.47,256.27 14.3,260.66 5.62,252.47 -3.06,244.29 1.43,231.84 0.52,207.62 -0.39,183.4 0.21,141.74 0.16,107.16 0.11,72.59 0.37,18.21 0.22,0.17 M -0.05,-1.42 C 0.38,-18.7 1.17,-70.74 1.18,-104.68 1.19,-138.63 -1.5,-181.59 0,-205.1 c 1.5,-23.51 0.95,-32.39 10.16,-40.63 9.21,-8.23 6.86,-7.49 45.11,-8.77 38.24,-1.29 112.03,0.95 184.35,1.07 72.31,0.12 169.98,-0.78 249.54,-0.35 79.57,0.44 182.77,1.57 227.85,2.96 45.09,1.38 34.26,-2.33 42.68,5.36 8.41,7.69 6.99,16.01 7.82,40.78 0.83,24.77 -2.43,72.12 -2.85,107.83 -0.42,35.71 0.43,72.58 0.35,106.42 -0.09,33.84 -1.12,62.34 -0.84,96.64 0.29,34.3 2.96,84.38 2.54,109.16 -0.41,24.77 2.79,32.37 -5,39.49 -7.8,7.12 -1.08,2.7 -41.76,3.22 -40.68,0.52 -121.15,0.29 -202.31,-0.09 -81.16,-0.39 -207.46,-1.52 -284.65,-2.2 C 155.81,255.11 92.4,254.71 54.56,253.93 16.71,253.15 15.12,259.06 5.92,251.12 -3.29,243.17 0.2,230.39 -0.67,206.28 -1.53,182.16 0.55,140.88 0.71,106.4 0.87,71.92 0.34,16.94 0.31,-0.6"
           stroke="#000000"
           stroke-width="2"
           fill="none"
           id="path8333" />
      </g>
    </g>
    <mask
       id="mask8339" />
    <g
       transform="matrix(0.26458333,0,0,0.26458333,-8.1992111,62.592755)"
       id="g8343">
      <text
         x="95.120201"
         y="0"
         font-family="Virgil, 'Segoe UI Emoji'"
         font-size="32px"
         fill="#000000"
         text-anchor="middle"
         style="white-space:pre"
         direction="ltr"
         dominant-baseline="text-before-edge"
         id="text8341">Sudoku MDI</text>
    </g>
    <mask
       id="mask8357" />
    <mask
       id="mask8373" />
    <mask
       id="mask8383" />
    <mask
       id="mask8447" />
    <mask
       id="mask8455" />
    <mask
       id="mask8463" />
    <mask
       id="mask8479" />
    <mask
       id="mask8487" />
    <mask
       id="mask8495" />
    <!-- svg-source:excalidraw -->
    <mask
       id="mask8669" />
  </g>
</svg>
